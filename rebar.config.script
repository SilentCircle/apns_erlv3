
Debug = case os:getenv("REBAR_CONFIG_SCRIPT_DEBUG") of
           X when X == false orelse X == [] -> false;
           _ -> true
        end.

%% If EnvVar exists and has some content, call UserFun(Content, UserArg)
%% and return its result.
%% Otherwise return UserArg unchanged.
RunIfEnvVar = fun(EnvVar, UserFun, Default) ->
                      case os:getenv(EnvVar) of
                          X when X =:= false; X == [] ->
                              Default;
                          EnvVal ->
                              UserFun(EnvVal, Default)
                      end
              end.

IsDbg = RunIfEnvVar("REBAR_EXTRA_DBG", fun(_EnvVal, _Def) -> true end, false).
DbgDo = fun(F) when is_function(F, 0) -> IsDbg andalso F() end.
DbgMsg = fun(Fmt, Args) -> DbgDo(fun() -> io:format(Fmt, Args) end) end.

DbgMsg("CONFIG: ~p~n", [CONFIG]).

%% Strip any combination of newline and whitespace off both ends of S
StrStrip = fun(S, F, S) ->
                   S;
              (S, F, _) ->
                   F(string:strip(string:strip(S, both, $\n), both), F, S)
           end.

StrClean = fun(S) ->
                   StrStrip(S, StrStrip, "")
           end.

GetFileAppVersion = fun() ->
                            case file:read_file("APP_VERSION") of
                                {ok, BVsn} ->
                                    DbgMsg("File vsn: ~p~n", [BVsn]),
                                    S = StrClean(binary_to_list(BVsn)),
                                    DbgMsg("Cleaned vsn: ~p~n", [S]),
                                    S;
                                _ ->
                                    undefined
                            end
                    end.

GetAppVersion = fun() ->
                      case os:getenv("APP_VERSION") of
                          X when X =:= false;
                                 X =:= [] -> GetFileAppVersion();
                          Val -> StrClean(Val)
                      end
                end.

%% Ensure edown target is valid
ValTarget = fun(Target) ->
                    ATarget = list_to_atom(Target),
                    lists:member(ATarget, ['github', 'gitlab', 'stash'])
                    orelse throw({bad_edown_target, Target}),
                    ATarget
            end.

GetCfg = fun(Key, Config, Default) ->
                      case lists:keyfind(Key, 1, Config) of
                          false ->
                              Default;
                          {Key, PL} ->
                              PL
                      end
              end.

KeyStore = fun(Key, Config, NewVal) ->
               lists:keystore(Key, 1, Config, {Key, NewVal})
          end.

GetEDocOpts = fun(Config) -> GetCfg(edoc_opts, Config, []) end.
GetPreHooks = fun(Config) -> GetCfg(pre_hooks, Config, []) end.
SetPreHooks = fun(PreHooks, Config) ->
                      KeyStore(pre_hooks, Config, PreHooks)
              end.
GetCTHook = fun(PreHooks) -> GetCfg(ct, PreHooks, undefined) end.
SetCTHook = fun(CTHook, PreHooks) ->
                    KeyStore(ct, PreHooks, CTHook)
            end.
GetCTOpts = fun(Config) -> GetCfg(ct_opts, Config, []) end.
SetCTOpts = fun(NewVal, Config) -> KeyStore(ct_opts, Config, NewVal) end.
GetCTSpec = fun(CTOpts) -> GetCfg(spec, CTOpts, undefined) end.
SetCTSpec = fun(NewVal, CTOpts) -> KeyStore(spec, CTOpts, NewVal) end.

GetFullHostname = fun() -> net_adm:localhost() end.

MakeLongNodeS = fun(NodeName, HostName) ->
                        NodeName ++ "@" ++ HostName
                end.

ConfigureCTOpts = fun(Config) ->
                          CTOpts0 = GetCTOpts(Config),
                          CTSpec0 = case GetCTSpec(CTOpts0) of
                                       undefined ->
                                           % This MUST be a list of specs!
                                           ["apns_erlv3.test.spec"];
                                       S ->
                                           S
                                   end,
                          CTOpts = SetCTSpec(CTSpec0, CTOpts0),
                          SetCTOpts(CTOpts, Config)
                  end.

ConfigurePreHooks = fun(Config0) ->
                            Config = ConfigureCTOpts(Config0),
                            CTSpec = GetCTSpec(GetCTOpts(Config)),
                            true = (CTSpec /= undefined),
                            Script = "./pre_common_test_hook.sh",
                            PreHooks = GetPreHooks(Config),
                            HostN = GetFullHostname(),
                            NodeName = MakeLongNodeS("ct1_apns_erlv3", HostN),
                            CTHook = case GetCTHook(PreHooks) of
                                         S when S == undefined orelse
                                                S == Script ->
                                             string:join([Script,
                                                          NodeName,
                                                          CTSpec], " ");
                                         S ->
                                             S
                                     end,
                            PreHooks1 = SetCTHook(CTHook, PreHooks),
                            SetPreHooks(PreHooks1, Config)
                    end.

ChangeEdownUrl = fun(Url, Cfg) ->
                         EDocOpts = KeyStore(top_level_readme,
                                             GetEDocOpts(Cfg),
                                             {"./README.md", Url}),
                         KeyStore(edoc_opts, Cfg, EDocOpts)
                 end.

%% If env var is defined, replace edown_target with its contents
ChangeEdownTarget = fun(Target, Cfg) ->
                            EDocOpts = KeyStore(edown_target,
                                                GetEDocOpts(Cfg),
                                                ValTarget(Target)),
                            KeyStore(edoc_opts, Cfg, EDocOpts)
                    end.

%%
%% Funs that run the change function if the environment variable is present.
%%
CfgEdownUrl = fun(Cfg) ->
                      RunIfEnvVar("EDOWN_TOP_LEVEL_README_URL",
                                  ChangeEdownUrl, Cfg)
              end.

CfgEdownTarget = fun(Cfg) ->
                         RunIfEnvVar("EDOWN_TARGET", ChangeEdownTarget, Cfg)
                 end.

%% Override edoc '@version' macro value to be current APP_VERSION.
CfgVersion = fun(Cfg) ->
                     case GetAppVersion() of
                         Vsn when is_list(Vsn) ->
                             DbgMsg("APP_VERSION: ~s~n", [Vsn]),
                             VsnDef = {version, Vsn},
                             Opts0 = proplists:get_value(edoc_opts, Cfg, []),
                             Defs = case proplists:get_value(def, Opts0, []) of
                                        Macros when is_list(Macros) ->
                                            [VsnDef | Macros -- [VsnDef]];
                                        {_Name, _Str} = Macro ->
                                            [VsnDef | [Macro] -- [VsnDef]]
                                    end,
                             Opts = lists:keystore(def, 1, Opts0, {def, Defs}),
                             lists:keystore(edoc_opts, 1, Cfg,
                                            {edoc_opts, Opts});
                         undefined ->
                             Cfg
                     end
             end.

CfgCtOverride = fun(Cfg) ->
                        case os:getenv("CT_OVERRIDE") of
                            false ->
                                ConfigurePreHooks(Cfg);
                            _ ->
                                Cfg
                        end
                end.

%%{pre_hooks, [{ct, "./pre_common_test_hook.sh"}]}.

%% Common Test configuration: ensure that the CT long node name
%% uses the current dns host name.

%%{pre_hooks, [{ct, "./pre_common_test_hook.sh"}]}.
%%{ct_opts, [{spec, "apns_erlv3.test.spec"}]}.

%% Chain the config change functions
RunChangeFuns = fun(Config) ->
                        NC = lists:foldl(fun(F, Cfg) -> F(Cfg) end,
                                         Config,
                                         [CfgEdownUrl, CfgEdownTarget,
                                          CfgVersion, CfgCtOverride]),
                        DbgMsg("~p~n", [NC]),
                        NC
                end.

RunChangeFuns(CONFIG).
